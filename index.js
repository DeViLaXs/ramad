// // index.js
// require('dotenv').config();
// const { Telegraf } = require('telegraf');
// const express = require('express');

// const connectDB = require("./db");
// const { getRandomJob } = require("./jobs");
// const {
//   canClaim, claimSalary, getRemainingTime, getBalance,
//   canInvest, invest, getInvestRemainingTime, getLeaderboard,
//   canLuckBet, getLuckBetRemainingTime, luck100
// } = require("./users");

// const bot = new Telegraf(process.env.BOT_TOKEN);
// const app = express();

// // ======= Webhook =======
// app.use(bot.webhookCallback('/webhook'));
// const PORT = process.env.PORT || 3000;

// // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
// connectDB();

// // ======= ุงูุฃูุงูุฑ =======
// bot.hears(/^(ุงูุงูุฑ|help)$/i, (ctx) => {
//   ctx.reply(
//     `๐ *ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:*\n\n` +
//     `๐ฐ 'ุฑุงุชุจ' - ููุญุตูู ุนูู ุฑุงุชุจ ุนุดูุงุฆู\n` +
//     `๐ 'ุฑุตูุฏ' - ููุนุฑูุฉ ุฑุตูุฏู ุงูุญุงูู\n` +
//     `๐ 'ุงุณุชุซูุงุฑ' - ูุงุณุชุซูุงุฑ ุฑุตูุฏู ุจูุณุจุฉ 1-20%\n` +
//     `๐ 'ุญุธ <ุงููุจูุบ>' - ุชุฌุฑุจุฉ ุงูุญุธ ุจุงูุฑูุงู ุจูุณุจุฉ %\n` +
//     `๐ 'ุชุตููู' - ุฃูุถู 10 ูุงุนุจูู ุญุณุจ ุงูุฑุตูุฏ\n` +
//     `โ 'ุฃูุงูุฑ' ุฃู 'help' - ูุนุฑุถ ูุงุฆูุฉ ุงูุฃูุงูุฑ\n`,
//     { parse_mode: "Markdown" }
//   );
// });

// // ======= ุฑุงุชุจ =======
// bot.hears("ุฑุงุชุจ", async (ctx) => {
//   const userId = ctx.from.id;
//   const userName = ctx.from.first_name;

//   if (!(await canClaim(userId))) {
//     const ms = await getRemainingTime(userId);
//     const min = Math.floor(ms / 60000);
//     const sec = Math.ceil((ms / 1000) % 60);
//     return ctx.reply(`โณ ุงูุชุธุฑ ${min} ุฏูููุฉ ู${sec} ุซุงููุฉ ูุจู ุทูุจ ุฑุงุชุจ ุฌุฏูุฏ`);
//   }

//   const job = getRandomJob();
//   const balance = await claimSalary(userId, job, userName);

//   ctx.reply(`๐ผ ุงููุธููุฉ: ${job.title}\n๐ต ุงูุฑุงุชุจ: ${job.salary} ุฑูุงู\n๐ช ุฑุตูุฏู: ${balance} ุฑูุงู`);
// });

// // ======= ุฑุตูุฏ =======
// bot.hears("ุฑุตูุฏ", async (ctx) => {
//   const balance = await getBalance(ctx.from.id);
//   ctx.reply(`๐ช ุฑุตูุฏู ุงูุญุงูู: ${balance} ุฑูุงู`);
// });

// // ======= ุงุณุชุซูุงุฑ =======
// bot.hears("ุงุณุชุซูุงุฑ", async (ctx) => {
//   const userId = ctx.from.id;
//   const userName = ctx.from.first_name;

//   if (!(await canInvest(userId))) {
//     const ms = await getInvestRemainingTime(userId);
//     const min = Math.floor(ms / 60000);
//     const sec = Math.ceil((ms / 1000) % 60);
//     return ctx.reply(`โณ ุงูุชุธุฑ ${min} ุฏูููุฉ ู${sec} ุซุงููุฉ ูุจู ุงูุงุณุชุซูุงุฑ ูุฑุฉ ุฃุฎุฑู`);
//   }

//   const result = await invest(userId, userName);
//   if (!result.success) return ctx.reply("๐ซ ุฑุตูุฏู ุบูุฑ ูุงูู ููุงุณุชุซูุงุฑ.");

//   ctx.reply(`๐ ุงุณุชุซูุงุฑ ูุงุฌุญ!\n๐น ุงููุณุจุฉ: ${result.percentage}%\n๐ต ุงูุฃุฑุจุงุญ: ${result.profit} ุฑูุงู\n๐ช ุฑุตูุฏู ุงูุฌุฏูุฏ: ${result.newBalance} ุฑูุงู`);
// });

// // ======= ุญุธ =======
// bot.hears(/ุญุธ(?:\s+(\d+))?/, async (ctx) => {
//   const userId = ctx.from.id;
//   const userName = ctx.from.first_name;
//   const amount = ctx.match[1];
//   if (!amount) return ctx.reply("๐ซ ุงูุฑุฌุงุก ูุชุงุจุฉ ุงููุจูุบ ุจุนุฏ ูููุฉ ุญุธ.\nูุซุงู: ุญุธ 500");

//   if (!(await canLuckBet(userId))) {
//     const ms = await getLuckBetRemainingTime(userId);
//     const min = Math.floor(ms / 60000);
//     const sec = Math.ceil((ms / 1000) % 60);
//     return ctx.reply(`โณ ุงูุชุธุฑ ${min} ุฏูููุฉ ู${sec} ุซุงููุฉ ูุจู ุชุฌุฑุจุฉ ุงูุญุธ ูุฑุฉ ุฃุฎุฑู`);
//   }

//   const result = await luck100(userId, amount, userName);
//   if (!result.success) return ctx.reply(result.msg);

//   const status = result.win ? "๐ ูุฒุช!" : "๐ ุฎุณุฑุช!";
//   const change = result.win ? `+${result.change}` : `${result.change}`;

//   ctx.reply(`๐ ุญุธู ุจุงูุฑูุงู!\n๐ต ุงููุจูุบ: ${amount} ุฑูุงู\n${status} (${change} ุฑูุงู)\n๐ช ุฑุตูุฏู ุงูุฌุฏูุฏ: ${result.newBalance} ุฑูุงู`);
// });

// // ======= ุชุตููู =======
// bot.hears("ุชุตููู", async (ctx) => {
//   const top = await getLeaderboard();
//   if (!top.length) return ctx.reply("๐ซ ูุง ููุฌุฏ ูุงุนุจูู ุญุงููุงู.");

//   let message = "๐ ุฃูุถู 10 ูุงุนุจูู:\n";
//   top.forEach((u, i) => message += `${i + 1}. ๐ค ${u.name} โ ๐ช ${u.balance} ุฑูุงู\n`);
//   ctx.reply(message);
// });

// // ======= ุชุดุบูู ุงูุณูุฑูุฑ =======
// app.listen(PORT, async () => {
//   console.log(`๐ Server running on port ${PORT}`);
//   await bot.telegram.setWebhook(`${process.env.RENDER_EXTERNAL_URL}/webhook`);
// });




require("dotenv").config();
const { Telegraf } = require("telegraf");
const mongoose = require("mongoose");
const User = require("./user");

const bot = new Telegraf(process.env.BOT_TOKEN);

// ุงุชุตุงู MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("โ Connected to MongoDB"))
.catch(err => console.error("โ MongoDB Error:", err));

// ===== ูุธุงุฆู ุจุณูุทุฉ ููุชุฌุฑุจุฉ =====

// /start
bot.start(async (ctx) => {
  const userId = String(ctx.from.id);
  let user = await User.findOne({ userId });

  if (!user) {
    user = new User({ userId, name: ctx.from.first_name });
    await user.save();
  }

  ctx.reply(`ูุฑุญุจูุง ${ctx.from.first_name}! ๐\nุฑุตูุฏู ุงูุญุงูู: ${user.balance} ๐ฐ`);
});

// /salary
bot.command("salary", async (ctx) => {
  const userId = String(ctx.from.id);
  let user = await User.findOne({ userId });

  if (!user) {
    user = new User({ userId, name: ctx.from.first_name });
  }

  user.balance += 100;
  user.lastClaim = Date.now();
  await user.save();

  ctx.reply(`๐ต ุชู ุฅุถุงูุฉ 100 ูุฑุตูุฏู.\nุงูุฑุตูุฏ ุงูุฌุฏูุฏ: ${user.balance}`);
});

// /balance
bot.command("balance", async (ctx) => {
  const userId = String(ctx.from.id);
  let user = await User.findOne({ userId });

  if (!user) {
    return ctx.reply("๐ซ ูุง ููุฌุฏ ูุฏูู ุญุณุงุจ ุจุนุฏ. ุงูุชุจ /start ุฃููุงู.");
  }

  ctx.reply(`๐ฐ ุฑุตูุฏู ุงูุญุงูู: ${user.balance}`);
});

// ===== ุชุดุบูู ุงูุจูุช =====
if (process.env.RENDER) {
  // ุนูู Render ูุณุชุฎุฏู Webhook
  bot.launch({
    webhook: {
      domain: process.env.RENDER_EXTERNAL_URL,
      port: process.env.PORT || 10000
    }
  });
} else {
  // ูุญูููุง ูุณุชุฎุฏู polling
  bot.launch();
}

console.log("๐ Bot is running...");

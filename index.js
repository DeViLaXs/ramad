const { Telegraf } = require('telegraf');
const express = require('express');
const token=process.env.BOT_TOKEN;
const bot = new Telegraf(token);
const app = express();

const { getRandomJob } = require("./jobs");
const {
    canClaim, claimSalary, getRemainingTime, getBalance,
    canInvest, invest, getInvestRemainingTime, getLeaderboard,
    canLuckBet, getLuckBetRemainingTime, luck100
} = require("./users");


app.use(bot.webhookCallback('/webhook'));


// ุชุนููู Webhook ุนูุฏ ุงูุชุดุบูู
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`๐ Server running on port ${PORT}`);
  await bot.telegram.setWebhook(`${process.env.RENDER_EXTERNAL_URL}/webhook`);
});

// ======= ูุงุฌูุฉ ุงุณุชุนูุงูุงุช =======
bot.hears(/^(ุงูุงูุฑ|help)$/i, (ctx) => {
    ctx.reply(
        `๐ *ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:*\n\n` +
        `๐ฐ 'ุฑุงุชุจ' - ููุญุตูู ุนูู ุฑุงุชุจ ุนุดูุงุฆู\n` +
        `๐ 'ุฑุตูุฏ' - ููุนุฑูุฉ ุฑุตูุฏู ุงูุญุงูู\n` +
        `๐ 'ุงุณุชุซูุงุฑ' - ูุงุณุชุซูุงุฑ ุฑุตูุฏู ุจูุณุจุฉ 1-20%\n` +
        `๐ 'ุญุธ <ุงููุจูุบ>' - ุชุฌุฑุจุฉ ุงูุญุธ ุจุงูุฑูุงู ุจูุณุจุฉ %\n` +
        `๐ 'ุชุตููู' - ุฃูุถู 10 ูุงุนุจูู ุญุณุจ ุงูุฑุตูุฏ\n` +
        `โ 'ุฃูุงูุฑ' ุฃู 'help' - ูุนุฑุถ ูุงุฆูุฉ ุงูุฃูุงูุฑ\n`,
        { parse_mode: "Markdown", reply_to_message_id: ctx.message.message_id }
    );
});


// ======= ุฑุงุชุจ =======
bot.hears("ุฑุงุชุจ", (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;

    if (!canClaim(userId)) {
        const ms = getRemainingTime(userId);
        const min = Math.floor(ms / 60000);
        const sec = Math.ceil((ms / 1000) % 60);
        return ctx.reply(`โณ ุงูุชุธุฑ ${min} ุฏูููุฉ ู${sec} ุซุงููุฉ ูุจู ุทูุจ ุฑุงุชุจ ุฌุฏูุฏ`, { reply_to_message_id: ctx.message.message_id });
    }

    const job = getRandomJob();
    const balance = claimSalary(userId, job, userName);

    ctx.reply(`๐ผ ุงููุธููุฉ: ${job.title}\n๐ต ุงูุฑุงุชุจ: ${job.salary} ุฑูุงู\n๐ช ุฑุตูุฏู: ${balance} ุฑูุงู`, { reply_to_message_id: ctx.message.message_id });
});

// ======= ุฑุตูุฏ =======
bot.hears("ุฑุตูุฏ", (ctx) => {
    const userId = ctx.from.id;
    const balance = getBalance(userId);
    ctx.reply(`๐ช ุฑุตูุฏู ุงูุญุงูู: ${balance} ุฑูุงู`, { reply_to_message_id: ctx.message.message_id });
});

// ======= ุงุณุชุซูุงุฑ =======
bot.hears("ุงุณุชุซูุงุฑ", (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;

    if (!canInvest(userId)) {
        const ms = getInvestRemainingTime(userId);
        const min = Math.floor(ms / 60000);
        const sec = Math.ceil((ms / 1000) % 60);
        return ctx.reply(`โณ ุงูุชุธุฑ ${min} ุฏูููุฉ ู${sec} ุซุงููุฉ ูุจู ุงูุงุณุชุซูุงุฑ ูุฑุฉ ุฃุฎุฑู`, { reply_to_message_id: ctx.message.message_id });
    }

    const result = invest(userId, userName);
    if (!result.success) return ctx.reply("๐ซ ุฑุตูุฏู ุบูุฑ ูุงูู ููุงุณุชุซูุงุฑ.", { reply_to_message_id: ctx.message.message_id });

    ctx.reply(`๐ ุงุณุชุซูุงุฑ ูุงุฌุญ!\n๐น ุงููุณุจุฉ: ${result.percentage}%\n๐ต ุงูุฃุฑุจุงุญ: ${result.profit} ุฑูุงู\n๐ช ุฑุตูุฏู ุงูุฌุฏูุฏ: ${result.newBalance} ุฑูุงู`, { reply_to_message_id: ctx.message.message_id });
});


// ======= ุญุธ ุจุงูุฑูุงู =======
bot.hears(/ุญุธ(?:\s+(\d+))?/, (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;
    const amount = ctx.match[1];

    // ุฅุฐุง ูู ูุถุน ุงููุณุชุฎุฏู ุงููุจูุบ
    if (!amount) {
        return ctx.reply(
            "๐ซ ุงูุฑุฌุงุก ูุชุงุจุฉ ุงููุจูุบ ุจุนุฏ ูููุฉ ุญุธ.\nูุซุงู: ุญุธ 500",
            { reply_to_message_id: ctx.message.message_id }
        );
    }

    if (!canLuckBet(userId)) {
        const ms = getLuckBetRemainingTime(userId);
        const min = Math.floor(ms / 60000);
        const sec = Math.ceil((ms / 1000) % 60);
        return ctx.reply(
            `โณ ุงูุชุธุฑ ${min} ุฏูููุฉ ู${sec} ุซุงููุฉ ูุจู ุชุฌุฑุจุฉ ุงูุญุธ ูุฑุฉ ุฃุฎุฑู`,
            { reply_to_message_id: ctx.message.message_id }
        );
    }

    const result = luck100(userId, amount, userName);
    if (!result.success) return ctx.reply(result.msg, { reply_to_message_id: ctx.message.message_id });

    const status = result.win ? "๐ ูุฒุช!" : "๐ ุฎุณุฑุช!";
    const change = result.win ? `+${result.change}` : `${result.change}`;

    ctx.reply(
        `๐ ุญุธู ุจุงูุฑูุงู!\n๐ต ุงููุจูุบ: ${amount} ุฑูุงู\n${status} (${change} ุฑูุงู)\n๐ช ุฑุตูุฏู ุงูุฌุฏูุฏ: ${result.newBalance} ุฑูุงู`,
        { reply_to_message_id: ctx.message.message_id }
    );
});

// ======= ุชุตููู =======
bot.hears("ุชุตููู", (ctx) => {
    const top = getLeaderboard();
    if (top.length === 0) return ctx.reply("๐ซ ูุง ููุฌุฏ ูุงุนุจูู ุญุงููุงู.", { reply_to_message_id: ctx.message.message_id });

    let message = "๐ ุฃูุถู 10 ูุงุนุจูู:\n";
    top.forEach((u, i) => {
        message += `${i + 1}. ๐ค ${u.name} โ ๐ช ${u.balance} ุฑูุงู\n`;
    });

    ctx.reply(message, { reply_to_message_id: ctx.message.message_id });
});



// ุชุดุบูู ุงูุจูุช
bot.launch().then(() => console.log("bot is running")).catch((err) => console.log("bot is running", err));

